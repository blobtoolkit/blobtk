name: release-blobtk

on:
  push:
    # tags:
    #   - "*"

jobs:
  macos:
    runs-on: macos-latest
    steps:
      - run: exit 0
  # macos:
  #   runs-on: macos-latest
  #   strategy:
  #     matrix:
  #       python-version: ["3.8", "3.9", "3.10", "3.11"]
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #     - name: Install Rust toolchain
  #       uses: dtolnay/rust-toolchain@stable
  #       with:
  #         targets: aarch64-apple-darwin
  #     - name: Build
  #       working-directory: ./rust
  #       run: cargo build --release
  #     - name: Tests
  #       working-directory: ./rust
  #       run: cargo test --no-default-features --release
  #     - name: Build wheels - x86_64
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         target: x86_64
  #         args: -i python --release --out dist --sdist -m rust/Cargo.toml
  #     - name: Install built wheel - x86_64
  #       run: |
  #         pip install blobtk --no-index --find-links ./dist --force-reinstall
  #     - name: Build wheels - universal2
  #       if: ${{ matrix.python-version >= '3.8' || contains(fromJson('["3.10", "3.11"]'), matrix.python-version) }}
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         args: -i python --release --universal2 --out dist -m rust/Cargo.toml
  #     - name: Install built wheel - universal2
  #       if: ${{ matrix.python-version >= '3.8' || contains(fromJson('["3.10", "3.11"]'), matrix.python-version) }}
  #       run: |
  #         pip install blobtk --no-index --find-links ./dist --force-reinstall
  #     # - name: Python UnitTest
  #     #   run: |
  #     #     pip install -r dev-requirements.txt
  #     #     make test
  #     - name: Rename binary
  #       run: |
  #         mv ./rust/target/release/blobtk ./rust/target/release/blobtk-macos
  #     - name: Upload binary
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: binaries
  #         path: rust/target/release/blobtk-macos
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: wheels
  #         path: dist

  # windows:
  #   runs-on: windows-latest
  #   strategy:
  #     matrix:
  #       python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']
  #       target: [x64, x86]
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #         architecture: ${{ matrix.target }}
  #     - name: Install Rust toolchain
  #       uses: dtolnay/rust-toolchain@stable
  #     - name: Build
  #       if: matrix.target == 'x64'
  #       run: cargo build --release
  #     - name: Tests
  #       if: matrix.target == 'x64'
  #       run: cargo test --no-default-features --release
  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         target: ${{ matrix.target }}
  #         args: -i python --release --out dist
  #     - name: Install built wheel
  #       run: |
  #         pip install cramjam --no-index --find-links dist --force-reinstall
  #     - name: Python UnitTest
  #       run: |
  #         pip install -r dev-requirements.txt
  #         make test
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: wheels
  #         path: dist

  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8"] #, "3.9", "3.10", "3.11"]
        target: [x86_64]
    steps:
      - uses: actions/checkout@v3
      - name: Install static libraries for C
        run: sudo apt-get install -y libc6-dev
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Build
        working-directory: ./rust
        run: RUSTFLAGS="-C target-feature=+crt-static" cargo build --target x86_64-unknown-linux-gnu --release
      - name: Tests
        working-directory: ./rust
        run: cargo test --no-default-features --release
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Audit
        working-directory: ./rust
        run: cargo install cargo-audit && cargo audit
      - name: Build Wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: -i ${{ matrix.python-version }} --release --out dist -m rust/Cargo.toml
      - name: Python UnitTest
        if: matrix.target == 'x86_64'
        run: |
          pip install blobtk --no-index --find-links ./dist --force-reinstall
      - name: Rename binary
        run: |
          ls ./rust/target/
          ls ./rust/target/*/
          mv ./rust/target/*/release/blobtk* ./rust/target/release/blobtk-linux
      - name: Upload binary
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: rust/target/release/blobtk-linux
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist
      - name: abort
        run: exit 1

  create-github-release:
    name: Create GitHub release
    runs-on: ubuntu-latest
    needs:
      - macos
      - linux
    if: "startsWith(github.ref, 'refs/tags/')"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: binaries
          path: ./dist
      - uses: actions/download-artifact@v3
        with:
          name: wheels
          path: ./dist
      - name: create release
        uses: "marvinpinto/action-automatic-releases@v1.2.1"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          draft: false
          prerelease: false
          title: "v${{github.ref_name}}"
          files: |
            dist/blobtk-macos
            dist/blobtk-linux
            dist/blobtk*.tgz

  upload-to-pypi:
    name: Upload to PyPI
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [macos, linux]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          pip install --upgrade twine
          twine upload --skip-existing *

  publish-crate:
    name: Publish crate
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: create-github-release
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Publish
        working-directory: ./rust
        run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}

  create-conda-release-macos:
    name: Create conda release Mac
    runs-on: macos-latest
    #if: "startsWith(github.ref, 'refs/tags/')"
    needs: macos
    steps:
      - uses: actions/checkout@v3
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
      - uses: actions/download-artifact@v3
        with:
          name: binaries
          path: ./dist
      - uses: actions/download-artifact@v3
        with:
          name: wheels
          path: ./dist
      - name: copy files
        run: |
          mkdir -p ./conda/dist
          cp ./dist/*macos*.whl ./conda/dist/
          cp ./dist/blobtk-macos ./conda/dist/blobtk
      - name: conda build
        run: |
          conda install -y conda-build
          export ANACONDA_API_TOKEN=${{ secrets.ANACONDA_API_TOKEN }}
          mkdir -p ./dist/osx-64
          conda build --no-anaconda-upload ./conda --output-folder ./dist
          ls ./dist/*
      - name: conda upload
        shell: bash -l {0}
        run: |
          conda install -y anaconda-client
          export ANACONDA_API_TOKEN=${{ secrets.ANACONDA_API_TOKEN }}
          anaconda upload --force --label main ./dist/osx-64/*.tar.bz2

  create-conda-release-linux:
    name: Create conda release Linux
    runs-on: ubuntu-latest
    #container: quay.io/pypa/manylinux2014_x86_64
    #if: "startsWith(github.ref, 'refs/tags/')"
    needs: linux
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: binaries
          path: ./dist
      - uses: actions/download-artifact@v3
        with:
          name: wheels
          path: ./dist
      # - name: Install libssl-dev
      #   run: sudo apt-get install -y libssl-dev pkg-config
      - name: copy files
        run: |
          mkdir -p ./conda/dist
          cp ./dist/*linux*.whl ./conda/dist/
          cp ./dist/blobtk-linux ./conda/dist/blobtk
      - uses: conda-incubator/setup-miniconda@v2
        with:
          miniconda-version: latest
          auto-activate-base: true
          activate-environment: ""
      - name: conda build
        run: |
          conda install -y conda-build
          export ANACONDA_API_TOKEN=${{ secrets.ANACONDA_API_TOKEN }}
          mkdir -p ./dist/linux-64
          conda build --no-anaconda-upload ./conda --output-folder ./dist
          ls ./dist/*
      - name: conda upload
        shell: bash -l {0}
        run: |
          conda install -y anaconda-client
          export ANACONDA_API_TOKEN=${{ secrets.ANACONDA_API_TOKEN }}
          anaconda upload --force --label main ./dist/linux-64/*.tar.bz2
