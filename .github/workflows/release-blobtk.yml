name: release-blobtk

on:
  push:
    branches:
      - main
      - feature/taxonomy
    tags:
      - "*"

env:
  VERSION: 0.4.1

jobs:
  macos-binary:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin
      - name: Build
        working-directory: ./rust
        run: cargo build --release
      #     - name: Tests
      #       working-directory: ./rust
      #       run: cargo test --no-default-features --release
      - name: Rename binary
        run: |
          mv ./rust/target/release/blobtk ./rust/target/release/blobtk-macos
      - name: Upload binary
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: rust/target/release/blobtk-macos

  linux-binary:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install static libraries for C
        run: sudo apt-get install -y libc6-dev
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: x86_64-unknown-linux-gnu
      - name: Build
        working-directory: ./rust
        # run: cargo build --target x86_64-unknown-linux-gnu --release
        run: RUSTFLAGS="-C target-feature=+crt-static" cargo build --target x86_64-unknown-linux-gnu --release
      # - name: Tests
      #   working-directory: ./rust
      #   run: cargo test --no-default-features --release
      # - uses: actions/setup-python@v4
      #   with:
      #     python-version: ${{ matrix.python-version }}
      # - name: Audit
      #   working-directory: ./rust
      #   run: cargo install cargo-audit && cargo audit
      - name: Rename binary
        run: |
          mv ./rust/target/x86_64-unknown-linux-gnu/release/blobtk ./rust/target/release/blobtk-linux
      - name: Upload binary
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: ./rust/target/release/blobtk-*

  sdist-wheels:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist -m rust/Cargo.toml
      - name: Upload sdist
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  linux-wheels:
    runs-on: ubuntu-latest
    needs:
      - linux-binary
      - sdist-wheels
    # strategy:
    #   matrix:
    #     target: [x86_64] # , x86, aarch64, armv7, s390x, ppc64le]
    steps:
      - uses: actions/checkout@v3
      - name: Install libssl-dev
        run: sudo apt-get install -y build-essential libssl-dev pkg-config cpanminus openssl librust-openssl-sys-dev
      - name: Install IPC::Cmd
        run: cpanm IPC::Cmd
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          # target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter --target x86_64-unknown-linux-gnu -m rust/Cargo.toml
          sccache: "true"
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  # windows:
  #   runs-on: windows-latest
  #   strategy:
  #     matrix:
  #       target: [x64] # , x86]
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.10"
  #         architecture: ${{ matrix.target }}
  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         target: ${{ matrix.target }}
  #         args: --release --out dist --find-interpreter -m rust/Cargo.toml
  #         sccache: "true"
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: wheels
  #         path: dist

  macos-wheels:
    runs-on: macos-latest
    needs:
      - macos-binary
      - sdist-wheels
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          # architecture: x64
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          args: --release --out dist --find-interpreter --target x86_64-apple-darwin -m rust/Cargo.toml
          sccache: "true"
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  # macos-aarch64:
  #   runs-on: self-hosted
  #   steps:
  #     - uses: actions/checkout@v3
  #     # - uses: actions/setup-python@v4
  #     #   with:
  #     #     python-version: "3.11"
  #     #     # architecture: x64
  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         args: --release --out dist --find-interpreter --target aarch64-apple-darwin -m rust/Cargo.toml
  #         sccache: "true"
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: wheels
  #         path: dist

  create-github-release:
    name: Create GitHub release
    runs-on: ubuntu-latest
    needs:
      - macos-wheels
      - linux-wheels
      - sdist-wheels
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          path: ./dist
      - name: create release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/binaries/blobtk-*
            dist/wheels/blobtk-*
            dist/wheels/blobtk*.tar.gz
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-push-docker-release:
    runs-on: ubuntu-latest
    needs: create-github-release
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v2
        with:
          images: genomehubs/blobtk
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./rust
          push: true
          tags: genomehubs/blobtk:${{ env.VERSION }}, genomehubs/blobtk:latest
          labels: ${{ steps.meta.outputs.labels }}

  build-and-push-docker-develop:
    runs-on: ubuntu-latest
    needs: linux-binary
    if: ${{ !startsWith(github.ref, 'refs/tags/') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v2
        with:
          images: genomehubs/blobtk
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./rust
          push: true
          tags: genomehubs/blobtk:develop
          labels: ${{ steps.meta.outputs.labels }}

  upload-to-pypi:
    name: Upload to PyPI
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - create-github-release
      # - macos-wheels
      # - linux-wheels
      # - sdist-wheels
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          pip install --upgrade twine
          twine upload --skip-existing *

  # release:
  #   name: Release
  #   runs-on: ubuntu-latest
  #   if: startsWith(github.ref, 'refs/tags/')
  #   needs: [linux, macos-x86_64]
  #   steps:
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: wheels
  #     - name: Publish to PyPI
  #       uses: PyO3/maturin-action@v1
  #       env:
  #         MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
  #       with:
  #         command: upload
  #         args: --skip-existing *

  publish-crate:
    name: Publish crate
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: create-github-release
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Publish
        working-directory: ./rust
        run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}

  create-conda-release-macos:
    name: Create conda release Mac
    runs-on: macos-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - create-github-release
      # - macos-binary
      # - macos-wheels
    steps:
      - uses: actions/checkout@v3
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: "3.10"
      - uses: actions/download-artifact@v3
        with:
          name: binaries
          path: ./dist
      - uses: actions/download-artifact@v3
        with:
          name: wheels
          path: ./dist
      - name: copy files
        run: |
          mkdir -p ./conda/dist
          cp ./dist/*macos*.whl ./conda/dist/
          cp ./dist/blobtk-macos ./conda/dist/blobtk
      - name: conda build
        run: |
          conda install -y conda-build
          export ANACONDA_API_TOKEN=${{ secrets.ANACONDA_API_TOKEN }}
          mkdir -p ./dist/osx-64
          conda build --no-anaconda-upload ./conda --output-folder ./dist
          ls ./dist/*
      - name: conda upload
        shell: bash -l {0}
        run: |
          conda install -y anaconda-client
          export ANACONDA_API_TOKEN=${{ secrets.ANACONDA_API_TOKEN }}
          anaconda upload --force --label main ./dist/osx-64/*.tar.bz2

  create-conda-release-linux:
    name: Create conda release Linux
    runs-on: ubuntu-latest
    #container: quay.io/pypa/manylinux2014_x86_64
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - create-github-release
      # - linux-binary
      # - linux-wheels
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: binaries
          path: ./dist
      - uses: actions/download-artifact@v3
        with:
          name: wheels
          path: ./dist
      # - name: Install libssl-dev
      #   run: sudo apt-get install -y libssl-dev pkg-config
      - name: copy files
        run: |
          mkdir -p ./conda/dist
          cp ./dist/*linux*.whl ./conda/dist/
          cp ./dist/blobtk-linux ./conda/dist/blobtk
      - uses: conda-incubator/setup-miniconda@v2
        with:
          miniconda-version: latest
          auto-activate-base: true
          activate-environment: ""
      - name: conda build
        run: |
          conda install -y conda-build
          export ANACONDA_API_TOKEN=${{ secrets.ANACONDA_API_TOKEN }}
          mkdir -p ./dist/linux-64
          conda build --no-anaconda-upload ./conda --output-folder ./dist
          ls ./dist/*
      - name: conda upload
        shell: bash -l {0}
        run: |
          conda install -y anaconda-client
          export ANACONDA_API_TOKEN=${{ secrets.ANACONDA_API_TOKEN }}
          anaconda upload --force --label main ./dist/linux-64/*.tar.bz2
