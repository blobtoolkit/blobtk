name: conda release

on:
  push:

jobs:
  fetch-wheels:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install jq
        run: sudo apt-get install -y jq
      - name: fetch wheels
        run: |
          mkdir -p ./dist
          cd ./dist
          curl -L https://pypi.python.org/pypi/blobtk/json | jq -r '.releases["0.2.4"] | map(.url) | map(select(test("10_7") | not)) | .[]' | while read URL; do wget $URL; done
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist
      - name: fetch binaries
        run: |
          mkdir -p ./dist
          cd ./dist
          curl -L https://github.com/blobtoolkit/blobtk/releases/download/0.2.4/blobtk-linux > blobtk-linux
          curl -L https://github.com/blobtoolkit/blobtk/releases/download/0.2.4/blobtk-macos > blobtk-macos
      # - name: Install Rust toolchain
      #   uses: dtolnay/rust-toolchain@stable
      # - name: Build
      #   working-directory: ./rust
      #   run: |
      #     cargo build --target=x86_64-unknown-linux-musl --release
      #     mv target/release/blobtk ../dist/blobtk-linux
      #     # sudo apt-get install -y musl-tools
      #     # rustup target add x86_64-unknown-linux-musl
      #     # cargo build --target=x86_64-unknown-linux-musl --release
      #     # ls target/x86_64-unknown-linux-musl/release
      #     # mv target/x86_64-unknown-linux-musl/release/blobtk ../dist/blobtk-linux
      - name: Upload binaries
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: dist

  rebuild-rust:
    runs-on: ubuntu-latest
    needs: fetch-wheels
    container: ubuntu:16.04
    steps:
      - uses: actions/checkout@v3
      - name: install dependencies
        run: |
          apt-get update && apt-get -y install build-essential curl
      # - name: Install Rust toolchain
      #   uses: dtolnay/rust-toolchain@stable

      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 --retry 10 -fsSL "https://sh.rustup.rs" | sh -s -- --default-toolchain none -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          . "$HOME/.cargo/env"
          rustup default stable
      - uses: conda-incubator/setup-miniconda@v2
        with:
          miniconda-version: latest
          auto-activate-base: true
          activate-environment: ""

      - name: Build
        working-directory: ./rust
        run: |
          conda install python=3.8
          cargo build --release
          mv target/release/blobtk ../dist/blobtk-linux
      - name: Upload binaries
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: dist

  # create-conda-release-macos:
  #   name: Create conda release Mac
  #   runs-on: macos-latest
  #   #if: "startsWith(github.ref, 'refs/tags/')"
  #   needs: [fetch-wheels, create-conda-release-linux]
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: conda-incubator/setup-miniconda@v2
  #       with:
  #         auto-update-conda: true
  #         python-version: ${{ matrix.python-version }}
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: binaries
  #         path: ./dist
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: wheels
  #         path: ./dist
  #     - name: copy files
  #       run: |
  #         mkdir -p ./conda/dist
  #         cp ./dist/*macos*.whl ./conda/dist/
  #         cp ./dist/blobtk-macos ./conda/dist/blobtk
  #     - name: conda build
  #       run: |
  #         conda install -y conda-build
  #         conda config --set anaconda_upload yes
  #         ANACONDA_API_TOKEN=${{ secrets.ANACONDA_API_TOKEN }}
  #         conda build ./conda

  create-conda-release-linux:
    name: Create conda release Linux
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux2014_x86_64
    #if: "startsWith(github.ref, 'refs/tags/')"
    needs: rebuild-rust
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: binaries
          path: ./dist
      - uses: actions/download-artifact@v3
        with:
          name: wheels
          path: ./dist
      # - name: Install libssl-dev
      #   run: sudo apt-get install -y libssl-dev pkg-config
      - name: copy files
        run: |
          mkdir -p ./conda/dist
          cp ./dist/*linux*.whl ./conda/dist/
          cp ./dist/blobtk-linux ./conda/dist/blobtk
      - uses: conda-incubator/setup-miniconda@v2
        with:
          miniconda-version: latest
          auto-activate-base: true
          activate-environment: ""
      - name: conda build
        run: |
          conda install -y conda-build
          export ANACONDA_API_TOKEN=${{ secrets.ANACONDA_API_TOKEN }}
          mkdir -p ./dist/linux-64
          conda build --no-anaconda-upload ./conda --output-folder ./dist
          ls ./dist/*
      - name: conda upload
        shell: bash -l {0}
        run: |
          conda install -y anaconda-client
          export ANACONDA_API_TOKEN=${{ secrets.ANACONDA_API_TOKEN }}
          anaconda upload --force --label main ./dist/linux-64/*.tar.bz2

  # publish:
  #   runs-on: ubuntu-latest
  #   needs: fetch-wheels
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: binaries
  #         path: ./dist
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: wheels
  #         path: ./dist
  #     - name: Install libssl-dev
  #       run: sudo apt-get install -y libssl-dev pkg-config
  #     - name: copy files
  #       run: |
  #         mkdir -p ./conda/dist
  #         cp ./dist/*linux*.whl ./conda/dist/
  #         cp ./dist/blobtk-linux ./conda/dist/blobtk
  #     - name: publish-to-conda
  #       uses: MichaelsJP/conda-package-publish-action@v1.0.0
  #       with:
  #         subDir: conda
  #         AnacondaToken: ${{ secrets.ANACONDA_API_TOKEN }}
  #         platforms: osx-64 linux-aarch64
  #         override: true
